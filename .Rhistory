i <- 808
i <- 790
boxplot(golub[i,]~gol.fac)
boxplot(golub[i, gol.fac=="ALL"])
i <- 790
boxplot(golub[i, gol.fac=="ALL"])
i <- 66
boxplot(golub[i, gol.fac=="ALL"])
i <- 790
qqnorm(golub[i, gol.fac=="ALL"])
qqline(golub[i, gol.fac=="ALL"])
i <- 66
qqnorm(golub[i, gol.fac=="ALL"])
qqline(golub[i, gol.fac=="ALL"])
mean(golub[i,gol.fac=="ALL"])
median(golub[i,gol.fac=="ALL"])
i <- 790
qqnorm(golub[i, gol.fac=="ALL"])
qqline(golub[i, gol.fac=="ALL"])
i <- 790
mean(golub[i,gol.fac=="ALL"])
median(golub[i,gol.fac=="ALL"])
i <- 66
mean(golub[i,gol.fac=="ALL"])
median(golub[i,gol.fac=="ALL"])
data(golub, package="multtest")
gol.fac <- factor(golub.cl,levels=0:1, labels= c("ALL","AML"))
efs <- apply(golub[,gol.fac=="ALL"],1,function(x) mean(x)/sd(x))
o <- order(efs,decreasing=TRUE)
efs[o[1:5]]
golub.gnames[o[1:5],2]
x <- data(golub, package = "multtest")
gol.fac <- factor(golub.cl,levels=0:1, labels= c("ALL","AML"))
boxplot(x,xlim=c(0,4))
data(golub, package = "multtest")
gol.fac <- factor(golub.cl,levels=0:1, labels= c("ALL","AML"))
boxplot(x,xlim=c(0,4))
data(golub, package = "multtest")
gol.fac <- factor(golub.cl,levels=0:1, labels= c("ALL","AML"))
boxplot(golub[1042, gol.fac == "ALL"],xlim=c(0,4))
arrows(2.0,1.93,1.24,1.93);text(2.5,1.93,"Median")
arrows(2.0,1.1,1.24,1.1)  ;text(2.5,1.1,"Outlier")
arrows(2.0,1.79,1.24,1.79);text(2.5,1.79,"first quartile")
arrows(2.0,2.17,1.24,2.17);text(2.5,2.17,"third quartile")
arrows(2.0,1.27,1.24,1.27);text(2.5,1.27,"lower wisker")
arrows(2.0,2.59,1.24,2.59);text(2.5,2.59,"upper wisker")
dev.copy2eps(device=x11,file="BoxplotWithExplanation.eps")
boxplot.stats(x, coef = 1.5, do.conf = TRUE, do.out = TRUE)
boxplot.stats(golub[1042, gol.fac == "ALL"], coef = 1.5, do.conf = TRUE, do.out = TRUE)
data(golub, package = "multtest")
gol.fac <- factor(golub.cl,levels=0:1, labels= c("ALL","AML"))
boxplot(golub[1042, gol.fac == "ALL"],xlim=c(0,4))
arrows(2.0,1.93,1.24,1.93);text(2.5,1.93,"Median")
arrows(2.0,1.1,1.24,1.1)  ;text(2.5,1.1,"Outlier")
arrows(2.0,1.79,1.24,1.79);text(2.5,1.79,"first quartile")
arrows(2.0,2.17,1.24,2.17);text(2.5,2.17,"third quartile")
arrows(2.0,1.27,1.24,1.27);text(2.5,1.27,"lower wisker")
arrows(2.0,2.59,1.24,2.59);text(2.5,2.59,"upper wisker")
dev.copy2eps(device=x11,file="BoxplotWithExplanation.eps")
boxplot.stats(golub[1042, gol.fac == "ALL"], coef = 1.5, do.conf = TRUE, do.out = TRUE)
par("mar")
par("mar=c(1.1,1.1)")
par(mfrow=c(2,1))
boxplot(data.frame(t(oncogol[,gol.fac=="ALL"])))
par("mar")
par(mar=c(1.1,1.1))
par("mar")
par(mar=c(1,1,1,1))
par(mfrow=c(2,1))
boxplot(data.frame(t(oncogol[,gol.fac=="ALL"])))
data(golub, package="multtest")
gol.fac <- factor(golub.cl, levels = 0:1, labels = c("ALL","AML"))
par("mar")
par(mar=c(1,1,1,1))
par(mfrow=c(2,1))
boxplot(data.frame(t(oncogol[,gol.fac=="ALL"])))
data(golub, package = "multtest")
gol.fac <- factor(golub.cl,levels=0:1, labels= c("ALL","AML"))
meanALL <- apply(oncogol[,gol.fac="ALL"],1,mean)
data(golub, package = "multtest")
gol.fac <- factor(golub.cl,levels=0:1, labels= c("ALL","AML"))
meanALL <- apply(golub[,gol.fac="ALL"],1,mean)
data(golub, package = "multtest")
gol.fac <- factor(golub.cl,levels=0:1, labels= c("ALL","AML"))
meanALL <- apply(golub[,gol.fac=="ALL"],1,mean)
meanALL
medianALL <- apply(golub[,gol.fac=="ALL"],1,median)
medianALL
sdALL <- apply(golub[,gol.fac=="ALL"],1,sd)
sdALL
IQRALL <- apply(golub[,gol.fac=="ALL"],1,IQR)
IQRALL
madALL <- apply(golub[,gol.fac=="ALL"],1,mad)
madALL
an <- sqrt(2*log(n)) - 0.5*(log(log(n))+log(4*pi))*(2*log(n))^(-1/2)
bn <- (2*log(n))^(-1/2)
e <- double(); n <- 10000 # Serfling p.90
for (i in 1:1000) e[i] <- (max(rnorm(n))-an)/bn
plot(density(e),ylim=c(0,0.5))
f<-function(x){exp(-x)*exp(-exp(-x))}
curve(f,range(density(e)$x),add=TRUE,col = "blue")
curve(dnorm,add=TRUE,col = "red")
n <- 1000
an <- sqrt(2*log(n)) - 0.5*(log(log(n))+log(4*pi))*(2*log(n))^(-1/2)
bn <- (2*log(n))^(-1/2)
e <- double(); n <- 10000 # Serfling p.90
for (i in 1:1000) e[i] <- (max(rnorm(n))-an)/bn
plot(density(e),ylim=c(0,0.5))
f<-function(x){exp(-x)*exp(-exp(-x))}
curve(f,range(density(e)$x),add=TRUE,col = "blue")
curve(dnorm,add=TRUE,col = "red")
n <- 1000
an <- sqrt(2*log(n)) - 0.5*(log(log(n))+log(4*pi))*(2*log(n))^(-1/2)
bn <- (2*log(n))^(-1/2)
e <- double(); n <- 10000 # Serfling p.90
for (i in 1:1000) e[i] <- (max(rnorm(n))-an)/bn
plot(density(e),ylim=c(0,0.5))
f<-function(x){exp(-x)*exp(-exp(-x))}
curve(f,range(density(e)$x),add=TRUE,col = "blue")
curve(dnorm,add=TRUE,col = "red")
an <- sqrt(2*log(n)) - 0.5*(log(log(n))+log(4*pi))*(2*log(n))^(-1/2)
bn <- (2*log(n))^(-1/2)
e <- double()
n <- 1000
for (i in 1:1000) e[i] <- (max(rnorm(n))-an)/bn
plot(density(e),ylim=c(0,0.5))
f<-function(x){exp(-x)*exp(-exp(-x))}
curve(f,range(density(e)$x),add=TRUE,col = "blue")
curve(dnorm,add=TRUE,col = "red")
n <- 10000
an <- sqrt(2*log(n)) - 0.5*(log(log(n))+log(4*pi))*(2*log(n))^(-1/2)
bn <- (2*log(n))^(-1/2)
e <- double()
n <- 10000
for (i in 1:1000) e[i] <- (max(rnorm(n))-an)/bn
plot(density(e),ylim=c(0,0.5))
f<-function(x){exp(-x)*exp(-exp(-x))}
curve(f,range(density(e)$x),add=TRUE,col = "blue")
curve(dnorm,add=TRUE,col = "red")
an <- sqrt(2*log(n)) - 0.5*(log(log(n))+log(4*pi))*(2*log(n))^(-1/2)
bn <- (2*log(n))^(-1/2)
e <- double(); n <- 1000 # Serfling p.90
for (i in 1:1000) e[i] <- (max(rnorm(n))-an)/bn
plot(density(e),ylim=c(0,0.5))
f<-function(x){exp(-x)*exp(-exp(-x))}
curve(f,range(density(e)$x),add=TRUE,col = "blue")
curve(dnorm,add=TRUE,col = "red")
an <- sqrt(2*log(n)) - 0.5*(log(log(n))+log(4*pi))*(2*log(n))^(-1/2)
bn <- (2*log(n))^(-1/2)
e <- double(); n <- 1000 # Serfling p.90
for (i in 1:1000) e[i] <- (max(rnorm(n))-an)/bn
plot(density(e),ylim=c(0,0.5))
f<-function(x){exp(-x)*exp(-exp(-x))}
curve(f,range(density(e)$x),add=TRUE,col = "blue")
curve(dnorm,add=TRUE,col = "red")
e <- double(); n <- 1000 # Serfling p.90
an <- sqrt(2*log(n)) - 0.5*(log(log(n))+log(4*pi))*(2*log(n))^(-1/2)
bn <- (2*log(n))^(-1/2)
for (i in 1:1000) e[i] <- (max(rnorm(n))-an)/bn
plot(density(e),ylim=c(0,0.5))
f<-function(x){exp(-x)*exp(-exp(-x))}
curve(f,range(density(e)$x),add=TRUE,col = "blue")
curve(dnorm,add=TRUE,col = "red")
if(!require("BiocManager",quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("multtest")
library(multtest)
data(golub)
ncol(golub)
nrow(golub)
y <- c(2,3,1,2, 8,7,9,8, 11,12,13,12)
a <- gl(3,4)
a
model.matrix(y ~ a - 1)
summary(lm(y ~ a - 1))
gol.fac <- factor(golub.cl, levels=0:1, labels= c("ALL","AML"))
View(golub)
gol.fac
golub.cl
model.matrix(golub ~ gol.cl - 1)
model.matrix(golub ~ gol.fac - 1)
golub
model.matrix(golub ~ gol.fac)
length(golub)
length(gol.fac)
length(gol.cl)
length(golub.cl)
a <- gl(1,115938)
a
a <- gl(2,115938)
model.matrix(golub ~ a - 1)
length(a)
length(golub)
View(golub)
length(golub)
gol.fac <- factor(golub, levels=0:1, labels= c("ALL","AML"))
gol.fac
gol.fac <- factor(golub, levels=0:1, labels= c("ALL","AML"))
gol.fac
#try with golub data
gol.fac <- factor(golub.cl, levels=0:1, labels= c("ALL","AML"))
gol.fac
gol.fac <- factor(golub, levels=0:1, labels= c("ALL","AML"))
#try with golub data
gol.fac <- factor(golub.cl, levels=0:1, labels= c("ALL","AML"))
gol.fac
gol.fac <- factor(golub, levels=0:1, labels= c("ALL","AML"))
gol.fav
gol.fac
View(golub)
View(golub.gnames)
str(golub)
class(golub)
class(y)
str(y)
golub[1042,gol.fac=="ALL"]
gol.fac <- factor(golub.cl, levels=0:1, labels= c("ALL","AML"))
golub[1042,gol.fac=="ALL"]
names <- c('ALL' ,'AML')
mydata[,names] <- lapply(mydata[,names] , factor)
gol.fac <- factor(golub, levels=0:1, labels= c("ALL","AML"))
View(golub)
View(golub)
golub1 <- golub[,gol.fac]
View(golub1)
data(golub)
View(golub.gnames)
View(golub.gnames)
View(golub)
gol.fac <- factor(golub, levels=0:1, labels= c("ALL","AML"))
name(gol.fac)
names(golub) <- c("ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","AML","AML","AML","AML","AML","AML","AML","AML","AML","AML")
golub
View(golub)
data(golub, header=FALSE)
data(golub, header="FALSE")
data(golub)
View(golub)
names(golub) <- c("ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","AML","AML","AML","AML","AML","AML","AML","AML","AML","AML")
golub.col <- c("ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","AML","AML","AML","AML","AML","AML","AML","AML","AML","AML")
golub1<- golub[, golub.col]
golub1 <- golub[, golub.col]
golub.col <- c("ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","AML","AML","AML","AML","AML","AML","AML","AML","AML","AML")
golub.col <- c("ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","ALL","AML","AML","AML","AML","AML","AML","AML","AML","AML","AML","AML")
golub1 <- golub[, golub.col]
imputed_heart<- imputed_all[, col_order]
golub1 <- golub[, golub.col]
golub1 <- golub[, golub.col]
data(golub)
gol.fac <- factor(golub, levels=0:1, labels= c("ALL","AML"))
colnames(golub) = golub.cl
View(golub)
golub[golub.cl] <- lapply(golub[golub.cl], factor)
str(golub)
View(golub)
data(golub)
gol.fac <- factor(golub, levels=0:1, labels= c("ALL","AML"))
colnames(golub) = golub.cl
golub[1042,gol.fac=="ALL"]
data(golub)
ALL <- golub[,1]
AML <- golub[,28]
x <- cbind(ALL,AML)
View(x)
b <- gl(2,3051)
model.matrix(x ~ b - 1)
class(x)
class(b)
class(y)
y <- c(2,3,1,2, 8,7,9,8, 11,12,13,12)
class(y)
data <- as.numeric(x)
model.matrix(x ~ b - 1)
model.matrix(x ~ b - 1)
length(b)
length(x)
model.matrix(x ~ b)
View(golub.gnames)
View(x)
x
b
list(x)
list <- as.list(x)
View(list)
list
model.matrix(list ~ b)
list1 <- as.numeric(list)
model.matrix(list ~ b)
model.matrix(list1 ~ b)
summary(lm(list1 ~ b))
View(list)
list1
View(x)
y <- c(2,3,1,2,8,7,9,8,11,12,13,12)
a <- gl(3,4)
gm <- as.numeric(tapply(y, a, mean))
gm
g <- 3
n <- 4
N <- 12
ssb <- 0
for (j in 1:g) {ssb <- ssb + (gm[j] - mean(y))^2}
SSB <- n*SSB
SSB <- n*ssb
mean(y)
SSW <- 0
for (j in 1:g) {SSW  <-  SSW + sum((y[a==j]-gm[j])^2)}
f <- (SSB/(g-1))/(SSW/(N-g))
anova(lm(y ~ a))
summary(lm(y ~ a))
y <- rnorm(12,1.9,0.5) #number of data, mean, standard deviation
round(y,2)
a <- gl(3,4)
anova(lm(y ~ a))$Pr[1]
library(ALL)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ALL")
library(ALL)
data(ALL)
ALLB123 <- ALL[,ALL$BT %in% c("B1","B2","B3")]
y <- exprs(ALLB123)["1866_g_at",]
summary(lm(y ~ ALLB123$BT))
ALLB123 <- ALL[,ALL$BT %in% c("B1","B2","B3")]
y <- exprs(ALLB123)["1242_at",]
summary(lm(y ~ ALLB123$BT))
pano <- apply(exprs(ALLB123),1,function(x) anova(lm(x~ALLB123$BT))$Pr[1])
sum(pano<0.05)
pano <- apply(exprs(ALLB123),1,function(x) anova(lm(x~ALLB123$BT))$Pr[1])
sum(pano<0.05)
ALLBm <- ALL[,which(ALL$BT %in% c("B","B1","B2","B3","B4") &
ALL$mol.biol %in% c("BCR/ABL","NEG"))]
facmolb <- factor(ALLBm$mol.biol)
facB <- factor(ceiling(as.integer(ALLBm$BT)/3),levels=1:2,labels=c("B012","B34"))
anova(lm(exprs(ALLBm)["32069_at",] ~ facB * facmolb))
summary(lm(exprs(ALLBm)["32069_at",] ~ facB * facmolb))
pval <- apply(exprs(ALLBm), 1, function(x) anova(lm(x ~ facB * facmolb))$Pr[1])
pvalt <- data.frame(t(pval))
colnames(pvalt) <- c("maineffectB","maineffectmolbiol","interaction")
sum(pvalt$maineffectB < 0.05 & pvalt$maineffectmolbiol < 0.05 & pvalt$interaction < 0.05)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GEOquery")
BiocManager::install("limma")
library(limma)
library(GEOquery)
gset <- getGEO("GSE15568", GSEMatrix =TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep("GPL96", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
fvarLabels(gset) <- make.names(fvarLabels(gset))
pData(gset)$data_processing[1]
exprs(gset) <- log2(exprs(gset))
x <- c(rep(1,16), rep(2,13))
design <- model.matrix(~ -1+factor(x))
colnames(design) <- c("CF", "NonCF")
design
ID <- featureNames(gset)
Symbol <- getSYMBOL(ID, "hgu133a.db")
BiocManager::install("hgu133a.db")
BiocManager::install("annotate")
library(annotate)
library(hgu133a.db)
ID <- featureNames(gset)
Symbol <- getSYMBOL(ID, "hgu133a.db")
fData(gset) <- data.frame(ID=ID, Symbol=Symbol)
fit <- lmFit(gset, design)
contrast.matrix <- makeContrasts(CF-NonCF, levels=design)
contrast.matrix
fit2 <- contrasts.fit(fit, contrast.matrix)
fit2 <- eBayes(fit2, 0.01)
# computes empirical Bayes statistics for differential expression.
limma_complete <- topTable(fit2, adjust="fdr", sort.by="B", number=62000)
colnames(fit2) # list contrast names
ct <- 1        # choose contrast of interest
volcanoplot(fit2, coef=ct, main=colnames(fit2)[ct], pch=20,
highlight=length(which(dT[,ct]!=0)), names=rep('+', nrow(fit2)))
colnames(fit2) # list contrast names
ct <- 1        # choose contrast of interest
volcanoplot(fit2, coef=ct, main=colnames(fit2)[ct], pch=20,
highlight=length(which(dT[,ct]!=0)), names=rep('+', nrow(fit2)))
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title"))
gs <- factor(sml)
gsms <- "00000000000000001111111111111"
sml <- strsplit(gsms, split="")[[1]]
gs <- factor(sml)
groups <- make.names(c("CF","Non-CF"))
levels(gs) <- groups
gset$group <- gs
design <- model.matrix(~group + 0, gset)
colnames(design) <- levels(gs)
fit <- lmFit(gset, design)
cts <- paste(groups[1], groups[2], sep="-")
cont.matrix <- makeContrasts(contrasts=cts, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=250)
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title"))
dT <- decideTests(fit2, adjust.method="fdr", p.value=0.05)
colnames(fit2) # list contrast names
ct <- 1        # choose contrast of interest
volcanoplot(fit2, coef=ct, main=colnames(fit2)[ct], pch=20,
highlight=length(which(dT[,ct]!=0)), names=rep('+', nrow(fit2)))
plotMD(fit2, column=ct, status=dT[,ct], legend=F, pch=20, cex=1)
abline(h=0)
g1 <- c(4.3, 3.5, 2.2, 3.7, 4.1, 2.0)
g2 <- c(3.4, 5.1, 2.8, 2.1, 3.1, 5.2)
g3 <- c(2.1, 4.2, 2.3, 4.4, 3.1, 3.7)
std.error <- function(x) sd(x)/sqrt(length(x))
std.error(g1)
std.error(g2)
std.error(g3)
qt(p = .025, df = g1)
n <- 6
t.value<-sqrt(n)*(mean(g1) - mu0)/sd(g1)
n <- 6
mu0 <- 0
t.value<-sqrt(n)*(mean(g1) - mu0)/sd(g1)
t.value
n <- 6
mu0 <- 0
t.value<-sqrt(n)*(mean(g2) - mu0)/sd(g2)
t.value
n <- 6
mu0 <- 0
t.value<-sqrt(n)*(mean(g3) - mu0)/sd(g3)
t.value
n <- 6
t.value<-sqrt(n)*(mean(g1) - mu0)/sd(g1)
t.value
2*pt(-abs(t),df=n-1)
2*pt(-abs(t.value),df=n-1)
n <- 6
mu0 <- 0
t.value<-sqrt(n)*(mean(g2) - mu0)/sd(g2)
t.value
2*pt(-abs(t.value),df=n-1)
n <- 6
mu0 <- 0
t.value<-sqrt(n)*(mean(g3) - mu0)/sd(g3)
t.value
2*pt(-abs(t.value),df=n-1)
if(!require("BiocManager",quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("multtest")
BiocManager::install("lmtest")
library(ALL)
data(ALL)
ALLB <- ALL[,ALL$BT %in% c("B","B1","B2","B3","B4")]
table(ALLB$BT)
psw <- apply(exprs(ALLB), 1, function(x) shapiro.test(residuals(lm(x ~ ALLB$BT)))
$p.value)
psw
b)	pbinom(14, 1000, .05)
pbinom(14, 1000, .05)
sum(dbinom(11:1000,1000,.05))
sum(dbinom(3:7,1000,.05))
sum(dbinom(11:1000,1000,.05))
#Question 11b
pbinom(9,1000,.05)
#Question 11c
sum(dbinom(6:1000,1000,.05))
#Question 11d
sum(dbinom(2:8,1000,.05))
pbinom(14,1200,.04)
sum(dbinom(11:1200,1200,.04))
sum(dbinom(3:7,1200,.04))
i <- 1391
shapiro.test(golub[i,gol.fac=="ALL"])
data(golub)
BiocManager::install("multtest")
library(multtest)
data(golub)
i <- 1391
shapiro.test(golub[i,gol.fac=="ALL"])
gol.fac <- factor(golub.cl, levels=0:1, labels= c("ALL","AML"))
i <- 1391
shapiro.test(golub[i,gol.fac=="ALL"])
wilcox.test(golub[i,] ~ gol.fac)
i <- 1788
boxplot(golub[i,] ~ gol.fac)
t.test(golub[i,] ~ gol.fac, var.equal = TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("affy")
library(affy)
library(limma)
library(annotate)
library(hgu133a.db)
library(GEOquery)
setwd("~/Documents/UM Semester 1/SQF7017 STATISTICAL ANALYSIS IN BIOINFORMATICS/Project/CF")
CF <- ReadAffy()
CF
eset <- rma(CF)
x <- c(rep(1,16), rep(2,13))
design <- model.matrix(~ -1+factor(x))
colnames(design) <- c("CF", "NonCF")
design
ID <- featureNames(eset)
Symbol <- getSYMBOL(ID, "hgu133a.db")
fData(eset) <- data.frame(ID=ID, Symbol=Symbol)
fit <- lmFit(eset, design)
contrast.matrix <- makeContrasts(CF-NonCF, levels=design)
contrast.matrix
fit2 <- contrasts.fit(fit, contrast.matrix)
fit2 <- eBayes(fit2, 0.01)
# computes empirical Bayes statistics for differential expression.
limma_complete <- topTable(fit2, adjust="fdr", sort.by="B", number=62000)
vennDiagram(limma_complete, circle.col=palette())
vennDiagram(exprs(limma_complete), circle.col=palette())
dT <- decideTests(fit2, adjust.method="fdr", p.value=0.05)
vennDiagram(limma_complete, circle.col=palette())
vennDiagram(dT, circle.col=palette())
